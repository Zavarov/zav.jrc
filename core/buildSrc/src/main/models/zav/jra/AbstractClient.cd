package zav.jra;

import okhttp3.Response.Response;
import okhttp3.Request.Request;

import java.io.IOException.IOException;
import java.lang.String.String;
import java.lang.InterruptedException.InterruptedException;
import java.util.Optional.Optional;
import java.util.function.Supplier.Supplier;

import zav.jra.AbstractClient.AbstractClient.Scope;
import zav.jra.AbstractClient.AbstractClient.Duration;
import zav.jra.exceptions.Exceptions.HttpException;
import zav.jra.exceptions.Exceptions.RateLimiterException;

public classdiagram AbstractClient {
    public abstract class AbstractClient {
        - Optional<Token> token;
        - UserAgent userAgent;
        /**
         * The application credentials is derived from the application id and secret.<p>
         * More explicitly, it is the base 64 encoding of "&lt;id&gt;:&lt;secret&gt;".
         */
        - String credentials;
        //- Scope[] scope;

        + abstract void login(Duration duration) throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract void login() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract void logout() throws IOException, HttpException, RateLimiterException, InterruptedException;
        # abstract void refresh() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract Response request(Supplier<Request> request) throws IOException, HttpException, RateLimiterException, InterruptedException;
    }

    public abstract class RateLimiter{
        /**
         * Approximate number of requests used in this period.
         */
        - long used;
        /**
         * Approximate number of requests left to use.
         */
        - long remaining;
        /**
         * Approximate number of seconds to end of period.
         */
        - long reset;

        public abstract void update(Response response);

        public abstract void acquire() throws InterruptedException;
    }

    public abstract class Token{
        <<key="access_token">>
        - String accessToken;
        <<key="refresh_token">>
        - Optional<String> refreshToken;
        <<key="expires_in">>
        - int lifetime;
        <<key="device_id">>
        - Optional<String> deviceId;

        public abstract boolean isExpired();
    }

    public class UserAgent{
        - String platform;
        - String name;
        - String version;
        - String author;
    }
}