package proj.zav.jra;

import java.io.IOException.IOException;
import java.lang.InterruptedException.InterruptedException;
import java.util.stream.Stream.Stream;

import proj.zav.jra.Client.Client;
import proj.zav.jra.Comment.Comment;
import proj.zav.jra.Link.Link;
import proj.zav.jra.Parameter.Parameter;
import proj.zav.jra.Preferences.Preferences;
import proj.zav.jra.Subreddit.Subreddit;

import proj.zav.jra.models.AbstractAccount.AbstractAccount;
import proj.zav.jra.models.AbstractAccount.AbstractSelfAccount;
import proj.zav.jra.models.AbstractAccount.FakeAccount;
import proj.zav.jra.models.Karma.Karma;
import proj.zav.jra.models.Thing.Thing;
import proj.zav.jra.models.Trophy.Trophy;

import proj.zav.jra.query.QueryGet.QueryGet;
import proj.zav.jra.query.QueryDelete.QueryDelete;
import proj.zav.jra.query.QueryPost.QueryPost;
import proj.zav.jra.query.QueryPut.QueryPut;
import proj.zav.jra.query.QueryPatch.QueryPatch;

public classdiagram Account {
    public abstract class Account extends AbstractAccount{
        <<ignore>>
        - Client client;
        //Users
        + abstract String postBlock(Parameter[] params) throws InterruptedException, IOException;
        + abstract String postFriend(Parameter[] params) throws InterruptedException, IOException;
        + abstract String postReport(Parameter[] params) throws InterruptedException, IOException;
        + abstract String postSetPermission(Parameter[] params) throws InterruptedException, IOException;
        + abstract String postUnfriend(Parameter[] params) throws InterruptedException, IOException;
        + abstract String deleteFriends(Parameter[] params) throws InterruptedException, IOException;
        + abstract String getFriends(Parameter[] params) throws InterruptedException, IOException;
        + abstract String putFriends(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Trophy> getTrophies(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Comment> getComments(Parameter[] params) throws InterruptedException, IOException;
        + abstract Listing<Thing> getDownvoted(Parameter[] params) throws InterruptedException, IOException;
        + abstract Listing<Thing> getGilded(Parameter[] params) throws InterruptedException, IOException;
        + abstract Listing<Thing> getHidden(Parameter[] params) throws InterruptedException, IOException;
        + abstract Listing<Thing> getOverview(Parameter[] params) throws InterruptedException, IOException;
        + abstract Listing<Thing> getSaved(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Link> getSubmitted(Parameter[] params) throws InterruptedException, IOException;
        + abstract Listing<Thing> getUpvoted(Parameter[] params) throws InterruptedException, IOException;
    }

    public abstract class SelfAccount extends AbstractSelfAccount{
        <<ignore>>
        - Client client;
        //Account
        + abstract Stream<Karma> getKarma(Parameter[] params) throws InterruptedException, IOException;
        + abstract Preferences getPreferences(Parameter[] params) throws InterruptedException, IOException;
        + abstract Preferences patchPreferences(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Trophy> getTrophies(Parameter[] params) throws InterruptedException, IOException;
        //Subreddits
        + abstract Stream<Subreddit> getMineContributor(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getMineModerator(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getMineStreams(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getMineSubscriber(Parameter[] params) throws InterruptedException, IOException;
    }
}