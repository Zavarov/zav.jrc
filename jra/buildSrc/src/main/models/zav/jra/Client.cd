package zav.jra;

import java.io.IOException.IOException;

import java.lang.InterruptedException.InterruptedException;
import java.lang.String.String;

import java.util.Map.Map;
import java.util.stream.Stream.Stream;

import zav.jra.AbstractClient.AbstractClient;
import zav.jra.Account.Account;
import zav.jra.Account.SelfAccount;
import zav.jra.FrontPage.FrontPage;
import zav.jra.Link.Link;
import zav.jra.Parameter.Parameter;

import zav.jra.models.Account.FakeAccount;
import zav.jra.models.Duplicate.Duplicate;
import zav.jra.models.Listing.Listing;
import zav.jra.models.Subreddit.FakeSubreddit;
import zav.jra.models.Submission.Submission;
import zav.jra.models.Thing.Thing;
import zav.jra.models.TrendingSubreddits.TrendingSubreddits;

public classdiagram Client {
    public abstract class Client extends AbstractClient {
        + abstract FrontPage getFrontPage();
        //Account
        + abstract SelfAccount getMe(Parameter[] params) throws InterruptedException, IOException;
        //Listings
        + abstract TrendingSubreddits getTrendingSubreddits(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Link> getLinksById(String[] names, Parameter[] params) throws InterruptedException, IOException;
        + abstract Submission getComments(String article, Parameter[] params) throws InterruptedException, IOException;
        + abstract Duplicate getDuplicates(String article, Parameter[] params) throws InterruptedException, IOException;
        //Subreddits
        + abstract Stream<String> getSearchRedditNames(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<String> postSearchRedditNames(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<FakeSubreddit> postSearchSubreddits(Parameter[] params) throws InterruptedException, IOException;
        + abstract String postSiteAdmin(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<FakeSubreddit> getSubredditAutocomplete(Parameter[] params) throws InterruptedException, IOException;
        + abstract Listing<Thing> getSubredditAutocompleteV2(Parameter[] params) throws InterruptedException, IOException;
        + abstract String postSubscribe(Parameter[] params) throws InterruptedException, IOException;
        + abstract Subreddit getSubreddit(String name, Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getSubredditsDefault(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getSubredditsGold(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getSubredditsNew(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getSubredditsPopular(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getSubredditsSearch(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getUsersNew(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getUsersPopular(Parameter[] params) throws InterruptedException, IOException;
        + abstract Stream<Subreddit> getUsersSearch(Parameter[] params) throws InterruptedException, IOException;
        //Users
        + abstract Map<String, FakeAccount> getUserDataByAccountIds(Parameter[] params) throws InterruptedException, IOException;
        + abstract boolean getUsernameAvailable(Parameter[] params) throws InterruptedException, IOException;
        + abstract Account getAccount(String name, Parameter[] params) throws InterruptedException, IOException;
    }
}